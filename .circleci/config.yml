# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
experimental:
  pipelines: true

# https://circleci.com/blog/managing-secrets-when-you-have-pull-requests-from-outside-contributors/
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - linux-python-3.8:
          filters:
            tags:
              only: /.*/
      - linux-python-3.7:
          filters:
            tags:
              only: /.*/
      - linux-python-3.6:
          filters:
            tags:
              only: /.*/
      - linux-python-3.5:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - linux-python-3.8
            - linux-python-3.7
            - linux-python-3.6
            - linux-python-3.5
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

  daily-build:
    triggers:
      - schedule:
          # At 08:00 UTC+8 everyday.
          cron: "0 0 * * *"
          filters:
            branches:
              only: master
    jobs:
      - linux-python-3.8
      - linux-python-3.7
      - linux-python-3.6
      - linux-python-3.5

variables:
  test-template: &test-template
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          keys:
          - pip-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements-test.txt" }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip
            pip install -r requirements.txt
            pip install -r requirements-test.txt
            pip install coveralls

      - save_cache:
          paths:
            - ./venv
          key: pip-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements-test.txt" }}-{{ checksum "requirements.txt" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            # The website of NaerDict use TLSv1.0
            # The MinProtocol of TLS on CircleCI is v1.2
            # If we don't do this, testings for NaerDict will fail on CircleCI
            sudo sed -i -E 's/MinProtocol[=\ ]+.*/MinProtocol = TLSv1.0/g' /etc/ssl/openssl.cnf
            make test

      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_artifacts:
          path: htmlcov
          destination: htmlcov

      - early_return_for_forked_pull_requests

      - run:
          name: send coverage to coveralls
          command: |
            . venv/bin/activate
            coveralls

jobs:
  # Available CircleCI Python images: https://hub.docker.com/r/circleci/python/tags/
  linux-python-3.8:
    <<: *test-template
    docker:
      - image: circleci/python:3.8

  linux-python-3.7:
    <<: *test-template
    docker:
      - image: circleci/python:3.7

  linux-python-3.6:
    <<: *test-template
    docker:
      - image: circleci/python:3.6

  linux-python-3.5:
    <<: *test-template
    docker:
      - image: circleci/python:3.5

  # Deploy to PyPI if semvar git tag pushed
  # https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/
  deploy:
    docker:
      # Available CircleCI Python images: https://hub.docker.com/r/circleci/python/tags/
      - image: circleci/python:3.5
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          keys:
          - pip-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements-test.txt" }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U pip
            pip install twine

      - save_cache:
          paths:
            - ./venv
          key: pip-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements-test.txt" }}-{{ checksum "requirements.txt" }}


      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc

      - run:
          name: create packages
          command: |
            . venv/bin/activate
            pip install wheel
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*
